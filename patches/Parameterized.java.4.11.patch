--- Parameterized.java.old	2015-06-24 16:56:22.000000000 +0200
+++ Parameterized.java.new	2015-06-24 16:57:52.000000000 +0200
@@ -9,7 +9,9 @@
  import java.text.MessageFormat;
  import java.util.ArrayList;
  import java.util.Collections;
+ import java.util.HashMap;
  import java.util.List;
+ import java.util.Map;
  import org.junit.runner.Runner;
  import org.junit.runner.notification.RunNotifier;
  import org.junit.runners.model.FrameworkField;
@@ -160,6 +162,17 @@
          int value() default 0;
      }
  
+     protected static final Map<Character, String> ESCAPE_SEQUENCES = new HashMap<Character, String>();
+ 
+     static {
+         ESCAPE_SEQUENCES.put('\0', "\\\\0");
+         ESCAPE_SEQUENCES.put('\t', "\\\\t");
+         ESCAPE_SEQUENCES.put('\b', "\\\\b");
+         ESCAPE_SEQUENCES.put('\n', "\\\\n");
+         ESCAPE_SEQUENCES.put('\r', "\\\\r");
+         ESCAPE_SEQUENCES.put('\f', "\\\\f");
+     }
+ 
      private class TestClassRunnerForParameters extends BlockJUnit4ClassRunner {
          private final Object[] fParameters;
  
@@ -330,7 +343,16 @@
          String finalPattern = namePattern.replaceAll("\\{index\\}",
                  Integer.toString(index));
          String name = MessageFormat.format(finalPattern, parameters);
-         return "[" + name + "]";
+         return "[" + sanitizeEscapeSequencesWithName(name) + "]";
+     }
+ 
+     private String sanitizeEscapeSequencesWithName(final String name) {
+         String result = name;
+         for (Map.Entry<Character, String> currentSequence : ESCAPE_SEQUENCES.entrySet()) {
+             result = result.replaceAll("" + currentSequence.getKey(), currentSequence.getValue());
+         }
+ 
+         return result;
      }
  
      private Exception parametersMethodReturnedWrongType() throws Exception {
